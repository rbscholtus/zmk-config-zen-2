/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        // Behavior: Send ' without shift, _ with shift

        quote_uscore: quote_underscore {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <
                &kp QUOT  // Sends `'` when pressed
                &kp UNDERSCORE  // Sends `_` when Shift is held
            >;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Behavior: Send " without shift, - with shift

        dquote_dash: doublequote_dash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <
                &kp DQT   // Sends " without Shift
                &kp KP_MINUS // Sends - with Shift
            >;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Behavior: Send / without shift, < with shift

        fslash_less: forward_slash_less {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <
                &kp SLASH  // Sends / without Shift
                &kp LT     // Sends < with Shift
            >;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Behavior: Send , without shift, ? with shift

        comma_question: comma_question {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <
                &kp COMMA  // Sends , without Shift
                &kp QUESTION  // Sends ? with Shift
            >;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Behavior: Send ) without shift, = with shift

        rparen_equal: right_parenthesis_equal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <
                &kp RIGHT_PARENTHESIS  // Sends ) without Shift
                &kp KP_EQUAL   // Sends = with Shift
            >;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        key_layout {
            bindings = <&tog 1>;
            key-positions = <1 2 3>;
            layers = <0 1>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <25 26 27>;
            layers = <0>;
        };

        play_pause {
            bindings = <&kp K_PLAY_PAUSE>;
            key-positions = <6 7>;
        };

        mute {
            bindings = <&kp K_MUTE>;
            key-positions = <7 8>;
        };

        volume_decrease {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <8 9>;
        };

        volume_increase {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <9 10>;
        };

        sleep {
            bindings = <&kp K_SLEEP>;
            key-positions = <10 11>;
        };

        spotlight {
            bindings = <&kp LG(SPACE)>;
            key-positions = <3 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&gresc                      &kp Q  &kp W  &kp E               &kp R                &kp T                   &kp Y            &kp U        &kp I                    &kp O    &kp P     &kp MINUS
&kp TAB                     &kp A  &kp S  &kp D               &kp F                &kp G                   &kp H            &kp J        &kp K                    &kp L    &kp SEMI  &kp SQT
&mt LCTRL LEFT_PARENTHESIS  &kp Z  &kp X  &kp C               &kp V                &kp B                   &kp N            &kp M        &kp COMMA                &kp DOT  &kp FSLH  &kp EQUAL
                                          &mt LEFT_ALT ENTER  &mt LEFT_GUI DELETE  &mt LEFT_SHIFT SPACE    &lt 3 BACKSPACE  &lt 2 ENTER  &lt 4 RIGHT_PARENTHESIS
            >;

            label = "QWERTY";
        };

        graphite_layer {
            display-name = "GRAPHITE";
            bindings = <
&trans  &kp B  &kp L  &kp D   &kp W   &kp Z     &quote_uscore  &kp F   &kp O          &kp U         &kp J         &kp SEMI
&trans  &kp N  &kp R  &kp T   &kp S   &kp G     &kp Y          &kp H   &kp A          &kp E         &kp I         &comma_question
&trans  &kp Q  &kp X  &kp M   &kp C   &kp V     &kp K          &kp P   &kp DOT        &dquote_dash  &fslash_less  &rparen_equal
                      &trans  &trans  &trans    &trans         &trans  &lt 4 AT_SIGN
            >;

            label = "GRAPHITE";
        };

        symbol_layer {
            display-name = "SYMBOL";
            bindings = <
&kp GRAVE                   &kp EXCL       &kp AT         &kp HASH            &kp DLLR             &kp PRCNT               &kp DOT    &kp N7     &kp N8    &kp N9  &kp KP_PLUS   &kp KP_DIVIDE
&kp TILDE                   &kp AMPERSAND  &kp PIPE       &kp CARET           &kp LEFT_BRACKET     &kp LEFT_BRACE          &kp EQUAL  &kp N4     &kp N5    &kp N6  &kp KP_MINUS  &kp KP_MULTIPLY
&mt LCTRL LEFT_PARENTHESIS  &none          &kp BACKSLASH  &none               &kp RBKT             &kp RIGHT_BRACE         &kp N0     &kp N1     &kp N2    &kp N3  &none         &none
                                                          &mt LEFT_ALT ENTER  &mt LEFT_GUI DELETE  &mt LEFT_SHIFT SPACE    &kp SPACE  &kp ENTER  &kp RPAR
            >;

            label = "SYMBOL";
        };

        navigation_layer {
            display-name = "NAV";
            bindings = <
&gresc   &msc SCRL_UP    &mkp MB1        &mmv MOVE_UP    &mkp MB2         &mkp MB3        &none   &kp LA(LEFT)  &kp UP_ARROW  &kp LA(RIGHT)  &none  &none
&kp TAB  &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none           &none   &kp LEFT      &kp DOWN      &kp RIGHT      &none  &sys_reset
&trans   &none           &sys_reset      &bootloader     &out OUT_USB     &out OUT_BLE    &none   &kp LG(LEFT)  &kp LA(DOWN)  &kp LG(RIGHT)  &none  &bootloader
                                         &trans          &trans           &trans          &trans  &trans        &trans
            >;

            label = "NAV";
        };

        fn_settings_layer {
            display-name = "FN_SETT";
            bindings = <
&bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &none   &kp F9  &kp F10  &kp F11  &kp F12  &none
&rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_ON   &rgb_ug RGB_EFF    &none   &kp F5  &kp F6   &kp F7   &kp F8   &none
&trans           &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_OFF  &rgb_ug RGB_EFR    &none   &kp F1  &kp F2   &kp F3   &kp F4   &none
                                                   &trans           &trans           &trans             &trans  &trans  &trans
            >;

            label = "FN_SETT";
        };
    };
};
