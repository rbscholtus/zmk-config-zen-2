/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        my_mt: my_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_MT";
            bindings = <&my_kp_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            label = "Toggle Layer On";
            #binding-cells = <1>;
            toggle-mode = "on";
        };

        my_hold_sk: my_hold_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_HOLD_SK";
            bindings = <&kp>, <&my_quick_sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        my_quick_sk: my_quick_sk {
            compatible = "zmk,behavior-sticky-key";
            label = "MY_QUICK_SK";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <1000>;
        };

        dqt_excl: dqt_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "DQT_EXCL";
            bindings = <&kp DQT>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sqt_qmark: sqt_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_QMARK";
            bindings = <&kp SQT>, <&kp QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_astrk: slash_astrk {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_ASTRK";
            bindings = <&kp SLASH>, <&kp ASTRK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_plus: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_PLUS";
            bindings = <&kp MINUS>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equals_under: equals_under {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUALS_UNDER";
            bindings = <&kp EQUAL>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        at_hash: at_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "AT_HASH";
            bindings = <&kp AT>, <&kp POUND>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_lpar: comma_lpar {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_LPAR";
            bindings = <&kp COMMA>, <&kp LPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_rpar: dot_rpar {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_RPAR";
            bindings = <&kp DOT>, <&kp RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lt_eql_und: lt_eql_und {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_EQL_UND";
            bindings = <&mo>, <&equals_under>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        bootloader {
            bindings = <&bootloader>;
            key-positions = <24 25 26>;
        };

        reset_system {
            bindings = <&sys_reset>;
            key-positions = <25 26 27>;
        };

        off_right {
            bindings = <&soft_off>;
            key-positions = <30 31 32>;
        };

        off_left {
            bindings = <&soft_off>;
            key-positions = <27 28 29>;
        };

        spotlight {
            bindings = <&kp LG(SPACE)>;
            key-positions = <3 4>;
            layers = <5>;
        };

        win_start {
            bindings = <&kp LEFT_GUI>;
            key-positions = <3 4>;
            layers = <6>;
        };

        screenshot_mac {
            bindings = <&kp LS(LG(NUMBER_4))>;
            key-positions = <2 3>;
            layers = <5>;
        };

        screenshot_win {
            bindings = <&kp LS(LG(S))>;
            key-positions = <2 3>;
            layers = <6>;
        };

        play_pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <6 7>;
            layers = <5 6>;
        };

        mute {
            bindings = <&kp K_MUTE>;
            key-positions = <7 8>;
            layers = <5 6>;
        };

        volume_decrease {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <8 9>;
            layers = <5 6>;
        };

        volume_increase {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <9 10>;
            layers = <5 6>;
        };

        the {
            bindings = <&my_the>;
            key-positions = <16 3 21>;
            layers = <1 4>;
        };

        that {
            bindings = <&my_that>;
            key-positions = <16 3 20>;
            layers = <1 4>;
        };

        for {
            bindings = <&my_for>;
            key-positions = <7 8 14>;
            layers = <1 4>;
        };

        and {
            bindings = <&my_and>;
            key-positions = <20 15 28>;
            layers = <1 4>;
        };
    };

    macros {
        my_kp_macro: my_kp_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "MY_KP_MACRO";
        };

        to_win_focal: to_win_focal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog_on 1 &tog_on 3 &tog_on 4>;
            label = "TO_WIN_FOCAL";
        };

        my_the: my_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E>;
            label = "MY_THE";
        };

        my_that: my_that {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp A &kp T>;
            label = "MY_THAT";
        };

        my_and: my_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp N &kp D>;
            label = "MY_AND";
        };

        my_for: my_for {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp O &kp R>;
            label = "MY_FOR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac_qwerty_layer {
            bindings = <
&kp ESCAPE       &kp Q  &kp W  &kp E                &kp R                &kp T                       &kp Y        &kp U        &kp I        &kp O    &kp P     &kp BACKSLASH
&mt GLOBE TAB    &kp A  &kp S  &kp D                &kp F                &kp G                       &kp H        &kp J        &kp K        &kp L    &kp SEMI  &kp SQT
&mt LCTRL GRAVE  &kp Z  &kp X  &kp C                &kp V                &kp B                       &kp N        &kp M        &kp COMMA    &kp DOT  &kp FSLH  &kp EQUAL
                               &mt LEFT_ALT ESCAPE  &mt LEFT_GUI DELETE  &mt LEFT_SHIFT BACKSPACE    &lt 5 SPACE  &lt 7 MINUS  &lt 9 ENTER
            >;

            label = "QWERTY";
        };

        focal_layer {
            bindings = <
&trans  &kp V           &kp L           &kp H           &kp G           &kp K                                &my_mt Q SINGLE_QUOTE  &kp F   &kp O   &kp U   &kp J   &trans
&trans  &my_mt LG(A) S  &kp R           &kp N           &kp T           &kp B                                &kp Y                  &kp C   &kp A   &kp E   &kp I   &kp SEMI
&trans  &my_mt LG(Z) Z  &my_mt LG(X) X  &my_mt LG(C) M  &my_mt LG(V) D  &kp P                                &kp BACKSPACE          &kp W   &trans  &trans  &trans  &trans
                                        &trans          &trans          &my_hold_sk LEFT_SHIFT LEFT_SHIFT    &trans                 &trans  &trans
            >;

            label = "FOCAL";
        };

        Neu-vv_layer {
            bindings = <
&trans  &kp V    &kp P    &kp L   &kp D   &slash_astrk                         &minus_plus  &kp U            &kp O       &kp Y  &kp F  &kp BSLH
&trans  &kp S    &kp C    &kp N   &kp T   &kp K                                &comma_lpar  &kp A            &kp E       &kp I  &kp H  &kp SEMI
&trans  &mt Z X  &mt Q W  &kp M   &kp G   &dqt_excl                            &kp BSPC     &dot_rpar        &sqt_qmark  &kp J  &kp B  &at_hash
                          &trans  &trans  &my_hold_sk LEFT_SHIFT LEFT_SHIFT    &trans       &lt_eql_und 8 0  &trans
            >;

            label = "NEU_VV";
        };

        win_layer {
            bindings = <
&trans              &trans  &trans  &trans  &trans            &trans    &trans       &trans  &trans  &trans  &trans  &trans
&kp TAB             &trans  &trans  &trans  &trans            &trans    &trans       &trans  &trans  &trans  &trans  &trans
&mt LEFT_WIN GRAVE  &trans  &trans  &trans  &trans            &trans    &trans       &trans  &trans  &trans  &trans  &trans
                                    &trans  &mt LCTRL DELETE  &trans    &lt 6 SPACE  &trans  &trans
            >;

            label = "WIN_QWE";
        };

        win_focal_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "WIN_FOC";
        };

        mac_navigation_layer {
            bindings = <
&trans  &none  &mkp MB1        &mmv MOVE_UP    &mkp MB2         &msc SCRL_DOWN    &kp LA(UP_ARROW)    &kp LA(LEFT)  &kp UP_ARROW  &kp LA(RIGHT)  &kp LG(UP_ARROW)    &none
&trans  &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP      &kp LA(DOWN_ARROW)  &kp LEFT      &kp DOWN      &kp RIGHT      &kp LG(DOWN_ARROW)  &none
&trans  &none  &none           &none           &none            &none             &none               &kp LG(LEFT)  &none         &kp LG(RIGHT)  &none               &none
                               &trans          &trans           &trans            &trans              &trans        &trans
            >;

            label = "NAV";
        };

        win_navigation_layer {
            bindings = <
&trans  &none  &mkp MB1        &mmv MOVE_UP    &mkp MB2         &msc SCRL_DOWN    &kp PAGE_UP    &kp LC(LEFT)  &kp UP_ARROW  &kp LC(RIGHT)  &kp LC(HOME)  &none
&trans  &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP      &kp PAGE_DOWN  &kp LEFT      &kp DOWN      &kp RIGHT      &kp LC(END)   &none
&trans  &none  &none           &none           &none            &none             &none          &kp HOME      &none         &kp END        &none         &none
                               &trans          &trans           &trans            &trans         &trans        &trans
            >;

            label = "WIN_NAV";
        };

        num_sym_layer {
            bindings = <
&kp CARET  &kp PIPE          &kp AMPERSAND      &kp EXCLAMATION  &kp AT           &kp HASH                    &kp DOT    &kp N1  &kp N2  &kp N3  &kp PLUS      &kp COMMA
&kp TILDE  &kp LESS_THAN     &kp GREATER_THAN   &kp LPAR         &kp RPAR         &kp SPACE                   &kp N0     &kp N4  &kp N5  &kp N6  &kp ASTERISK  &kp MINUS
&trans     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp DOLLAR                  &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp SLASH     &kp PRCNT
                                                &trans           &trans           &mt LEFT_SHIFT BACKSPACE    &trans     &trans  &trans
            >;

            label = "NUM_SYM";
        };

        num_sym_layer2 {
            label = "NUM_SYM2";
            bindings = <
&trans  &kp TILDE         &kp CARET          &kp LESS_THAN   &kp GREATER_THAN  &kp HASH                    &kp DOT    &kp N1  &kp N2  &kp N3  &kp PLUS      &kp COMMA
&trans  &kp PIPE          &kp AMPERSAND      &kp LPAR        &kp RPAR          &kp SPACE                   &kp N0     &kp N4  &kp N5  &kp N6  &kp ASTERISK  &kp MINUS
&trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE   &kp DOLLAR                  &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp SLASH     &kp PRCNT
                                             &trans          &trans            &mt LEFT_SHIFT BACKSPACE    &trans     &trans  &trans
            >;
        };

        fn_settings_layer {
            bindings = <
&to 0   &to 1           &to 2         &to 3         &to_win_focal    &rgb_ug RGB_ON     &none   &kp F1  &kp F2   &kp F3   &kp F4   &none
&trans  &out OUT_BLE    &out OUT_USB  &none         &rgb_ug RGB_EFR  &rgb_ug RGB_OFF    &none   &kp F5  &kp F6   &kp F7   &kp F8   &none
&trans  &bt BT_CLR_ALL  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1     &bt BT_SEL 0       &none   &kp F9  &kp F10  &kp F11  &kp F12  &none
                                      &trans        &trans           &trans             &trans  &trans  &trans
            >;

            label = "FN_SETT";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
