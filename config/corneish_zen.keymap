/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        // Behavior: Send ' without shift, _ with shift
        // Behavior: Send " without shift, - with shift
        // Behavior: Send / without shift, < with shift
        // Behavior: Send , without shift, ? with shift
        // Behavior: Send ) without shift, = with shift
    };

    combos {
        compatible = "zmk,combos";

        bootloader {
            bindings = <&bootloader>;
            key-positions = <24 25 26>;
            layers = <0>;
        };

        reset_system {
            bindings = <&sys_reset>;
            key-positions = <25 26 27>;
            layers = <0>;
        };

        out_usb {
            bindings = <&out OUT_USB>;
            key-positions = <26 27 28>;
            layers = <0>;
        };

        out_ble {
            bindings = <&out OUT_BLE>;
            key-positions = <27 28 29>;
            layers = <0>;
        };

        spotlight {
            bindings = <&kp LG(SPACE)>;
            key-positions = <3 4>;
            layers = <4>;
        };

        play_pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <6 7>;
            layers = <4>;
        };

        mute {
            bindings = <&kp K_MUTE>;
            key-positions = <7 8>;
            layers = <4>;
        };

        volume_decrease {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <8 9>;
            layers = <4>;
        };

        volume_increase {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <9 10>;
            layers = <4>;
        };

        power {
            bindings = <&kp C_POWER>;
            key-positions = <10 11>;
            layers = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac_qwerty_layer {
            bindings = <
&gresc                      &kp Q    &kp W    &kp E               &kp R                &kp T                       &kp Y        &kp U        &kp I        &kp O    &kp P     &kp BACKSLASH
&lt 6 TAB                   &lt 5 A  &lt 4 S  &lt 3 D             &lt 2 F              &lt 1 G                     &kp H        &kp J        &kp K        &kp L    &kp SEMI  &kp SQT
&mt LCTRL LEFT_PARENTHESIS  &kp Z    &kp X    &kp C               &kp V                &kp B                       &kp N        &kp M        &kp COMMA    &kp DOT  &kp FSLH  &kp RIGHT_PARENTHESIS
                                              &mt LEFT_ALT ENTER  &mt LEFT_GUI DELETE  &mt LEFT_SHIFT BACKSPACE    &lt 4 SPACE  &lt 4 MINUS  &lt 5 EQUAL
            >;

            label = "QWERTY";
        };

        mac_mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &none  &mkp MB1        &mmv MOVE_UP    &mkp MB2         &msc SCRL_UP      &msc SCRL_UP    &mkp MB1        &mmv MOVE_UP    &mkp MB2         &none     &none
&trans  &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN    &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB3  &none
&trans  &none  &none           &none           &none            &none             &none           &none           &none           &none            &none     &none
                               &trans          &trans           &trans            &trans          &trans          &trans
            >;
        };

        mac_navigation_layer {
            bindings = <
&trans  &none  &mkp MB1        &mmv MOVE_UP    &mkp MB2         &msc SCRL_UP      &kp LA(UP_ARROW)    &kp LA(LEFT)  &kp UP_ARROW  &kp LA(RIGHT)  &kp LG(UP_ARROW)    &none
&trans  &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN    &kp LA(DOWN_ARROW)  &kp LEFT      &kp DOWN      &kp RIGHT      &kp LG(DOWN_ARROW)  &none
&trans  &none  &none           &none           &none            &none             &none               &kp LG(LEFT)  &none         &kp LG(RIGHT)  &none               &none
                               &trans          &trans           &trans            &trans              &trans        &trans
            >;

            label = "NAV";
        };

        number_layer {
            bindings = <
&kp GRAVE  &kp EXCL   &kp AT         &kp HASH           &kp DLLR               &kp PRCNT          &kp DOT    &kp N1  &kp N2  &kp N3  &kp PLUS   &kp COMMA
&kp TILDE  &kp CARET  &kp AMPERSAND  &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS   &kp LEFT_BRACE     &kp N0     &kp N4  &kp N5  &kp N6  &kp MINUS  &kp ASTERISK
&trans     &none      &kp PIPE       &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE    &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp SLASH  &kp PERCENT
                                     &trans             &trans                 &trans             &trans     &trans  &trans
            >;

            label = "NUM";
        };

        symbol_layer {
            label = "symbol";
            bindings = <
&kp GRAVE  &kp EXCL   &kp AT         &kp HASH           &kp DLLR              &kp PRCNT         &kp DOT          &kp N1                 &kp N2  &kp N3  &kp PLUS   &trans
&kp TILDE  &kp CARET  &kp AMPERSAND  &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS  &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp N5  &kp N6  &kp MINUS  &kp ASTERISK
&trans     &none      &kp PIPE       &kp RIGHT_BRACKET  &kp LEFT_BRACKET      &none             &none            &kp RIGHT_BRACKET      &kp N8  &kp N9  &kp SLASH  &trans
                                     &trans             &trans                &trans            &trans           &trans                 &trans
            >;
        };

        func_layer {
            bindings = <
&rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &rgb_ug RGB_ON     &none   &kp F1  &kp F2   &kp F3   &kp F4   &none
&rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &rgb_ug RGB_OFF    &none   &kp F5  &kp F6   &kp F7   &kp F8   &none
&trans           &bt BT_CLR_ALL   &bt BT_SEL 3     &bt BT_SEL 2     &bt BT_SEL 1     &bt BT_SEL 0       &none   &kp F9  &kp F10  &kp F11  &kp F12  &none
                                                   &trans           &trans           &trans             &trans  &trans  &trans
            >;

            label = "FUNC";
        };

        settings_layer {
            label = "SETTINGS";
            bindings = <
&rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &rgb_ug RGB_ON     &none   &kp F1  &kp F2   &kp F3   &kp F4   &none
&rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &rgb_ug RGB_OFF    &none   &kp F5  &kp F6   &kp F7   &kp F8   &none
&trans           &bt BT_CLR_ALL   &bt BT_SEL 3     &bt BT_SEL 2     &bt BT_SEL 1     &bt BT_SEL 0       &none   &kp F9  &kp F10  &kp F11  &kp F12  &none
                                                   &trans           &trans           &trans             &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
